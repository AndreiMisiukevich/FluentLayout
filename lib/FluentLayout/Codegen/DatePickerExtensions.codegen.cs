// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class DatePickerExtensions
    {


        public static TBindable WithDatePickerDateSelectedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.DateChangedEventArgs> handlerAction) where TBindable : DatePicker
        {
            self.DateSelected += handlerAction;

            return self;
        }

        public static TBindable ClearDatePickerDateSelectedHandlers<TBindable>(this TBindable self) where TBindable : DatePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DateSelected");

            return self;
        }

        public static TBindable WithDatePickerChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : DatePicker
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearDatePickerChildrenReorderedHandlers<TBindable>(this TBindable self) where TBindable : DatePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithDatePickerFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : DatePicker
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearDatePickerFocusedHandlers<TBindable>(this TBindable self) where TBindable : DatePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithDatePickerMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : DatePicker
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearDatePickerMeasureInvalidatedHandlers<TBindable>(this TBindable self) where TBindable : DatePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithDatePickerSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : DatePicker
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearDatePickerSizeChangedHandlers<TBindable>(this TBindable self) where TBindable : DatePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithDatePickerUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : DatePicker
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearDatePickerUnfocusedHandlers<TBindable>(this TBindable self) where TBindable : DatePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithDatePickerBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : DatePicker
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearDatePickerBatchCommittedHandlers<TBindable>(this TBindable self) where TBindable : DatePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithDatePickerFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : DatePicker
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearDatePickerFocusChangeRequestedHandlers<TBindable>(this TBindable self) where TBindable : DatePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithDatePickerChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : DatePicker
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearDatePickerChildAddedHandlers<TBindable>(this TBindable self) where TBindable : DatePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithDatePickerChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : DatePicker
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearDatePickerChildRemovedHandlers<TBindable>(this TBindable self) where TBindable : DatePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithDatePickerDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : DatePicker
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearDatePickerDescendantAddedHandlers<TBindable>(this TBindable self) where TBindable : DatePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithDatePickerDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : DatePicker
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearDatePickerDescendantRemovedHandlers<TBindable>(this TBindable self) where TBindable : DatePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithDatePickerPlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : DatePicker
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearDatePickerPlatformSetHandlers<TBindable>(this TBindable self) where TBindable : DatePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithDatePickerPropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : DatePicker
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearDatePickerPropertyChangedHandlers<TBindable>(this TBindable self) where TBindable : DatePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithDatePickerBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : DatePicker
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearDatePickerBindingContextChangedHandlers<TBindable>(this TBindable self) where TBindable : DatePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithDatePickerPropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : DatePicker
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearDatePickerPropertyChangingHandlers<TBindable>(this TBindable self) where TBindable : DatePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
        public static TBindable BindFormatDatePicker<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : DatePicker
                => self.Bind(DatePicker.FormatProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindDateDatePicker<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : DatePicker
                => self.Bind(DatePicker.DateProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindMinimumDateDatePicker<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : DatePicker
                => self.Bind(DatePicker.MinimumDateProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindMaximumDateDatePicker<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : DatePicker
                => self.Bind(DatePicker.MaximumDateProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindTextColorDatePicker<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : DatePicker
                => self.Bind(DatePicker.TextColorProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindFontFamilyDatePicker<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : DatePicker
                => self.Bind(DatePicker.FontFamilyProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindFontSizeDatePicker<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : DatePicker
                => self.Bind(DatePicker.FontSizeProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindFontAttributesDatePicker<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : DatePicker
                => self.Bind(DatePicker.FontAttributesProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}