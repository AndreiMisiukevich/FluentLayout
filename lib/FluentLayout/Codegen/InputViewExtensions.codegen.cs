// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class InputViewExtensions
    {


        public static TBindable WithInputViewChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : InputView
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearInputViewChildrenReorderedHandlers<TBindable>(this TBindable self) where TBindable : InputView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithInputViewFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : InputView
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearInputViewFocusedHandlers<TBindable>(this TBindable self) where TBindable : InputView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithInputViewMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : InputView
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearInputViewMeasureInvalidatedHandlers<TBindable>(this TBindable self) where TBindable : InputView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithInputViewSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : InputView
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearInputViewSizeChangedHandlers<TBindable>(this TBindable self) where TBindable : InputView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithInputViewUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : InputView
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearInputViewUnfocusedHandlers<TBindable>(this TBindable self) where TBindable : InputView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithInputViewBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : InputView
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearInputViewBatchCommittedHandlers<TBindable>(this TBindable self) where TBindable : InputView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithInputViewFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : InputView
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearInputViewFocusChangeRequestedHandlers<TBindable>(this TBindable self) where TBindable : InputView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithInputViewChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : InputView
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearInputViewChildAddedHandlers<TBindable>(this TBindable self) where TBindable : InputView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithInputViewChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : InputView
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearInputViewChildRemovedHandlers<TBindable>(this TBindable self) where TBindable : InputView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithInputViewDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : InputView
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearInputViewDescendantAddedHandlers<TBindable>(this TBindable self) where TBindable : InputView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithInputViewDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : InputView
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearInputViewDescendantRemovedHandlers<TBindable>(this TBindable self) where TBindable : InputView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithInputViewPlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : InputView
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearInputViewPlatformSetHandlers<TBindable>(this TBindable self) where TBindable : InputView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithInputViewPropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : InputView
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearInputViewPropertyChangedHandlers<TBindable>(this TBindable self) where TBindable : InputView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithInputViewBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : InputView
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearInputViewBindingContextChangedHandlers<TBindable>(this TBindable self) where TBindable : InputView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithInputViewPropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : InputView
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearInputViewPropertyChangingHandlers<TBindable>(this TBindable self) where TBindable : InputView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
        public static TBindable BindKeyboardInputView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : InputView
                => self.Bind(InputView.KeyboardProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindIsSpellCheckEnabledInputView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : InputView
                => self.Bind(InputView.IsSpellCheckEnabledProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindMaxLengthInputView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : InputView
                => self.Bind(InputView.MaxLengthProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}