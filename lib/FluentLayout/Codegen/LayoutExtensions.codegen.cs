// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class LayoutExtensions
    {


        public static TBindable WithLayoutLayoutChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Layout
        {
            self.LayoutChanged += handlerAction;

            return self;
        }

        public static TBindable ClearLayoutLayoutChangedHandlers<TBindable>(this TBindable self) where TBindable : Layout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "LayoutChanged");

            return self;
        }

        public static TBindable WithLayoutChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Layout
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearLayoutChildrenReorderedHandlers<TBindable>(this TBindable self) where TBindable : Layout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithLayoutFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : Layout
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearLayoutFocusedHandlers<TBindable>(this TBindable self) where TBindable : Layout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithLayoutMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Layout
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearLayoutMeasureInvalidatedHandlers<TBindable>(this TBindable self) where TBindable : Layout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithLayoutSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Layout
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearLayoutSizeChangedHandlers<TBindable>(this TBindable self) where TBindable : Layout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithLayoutUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : Layout
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearLayoutUnfocusedHandlers<TBindable>(this TBindable self) where TBindable : Layout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithLayoutBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : Layout
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearLayoutBatchCommittedHandlers<TBindable>(this TBindable self) where TBindable : Layout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithLayoutFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : Layout
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearLayoutFocusChangeRequestedHandlers<TBindable>(this TBindable self) where TBindable : Layout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithLayoutChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Layout
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearLayoutChildAddedHandlers<TBindable>(this TBindable self) where TBindable : Layout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithLayoutChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Layout
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearLayoutChildRemovedHandlers<TBindable>(this TBindable self) where TBindable : Layout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithLayoutDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Layout
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearLayoutDescendantAddedHandlers<TBindable>(this TBindable self) where TBindable : Layout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithLayoutDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Layout
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearLayoutDescendantRemovedHandlers<TBindable>(this TBindable self) where TBindable : Layout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithLayoutPlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Layout
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearLayoutPlatformSetHandlers<TBindable>(this TBindable self) where TBindable : Layout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithLayoutPropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : Layout
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearLayoutPropertyChangedHandlers<TBindable>(this TBindable self) where TBindable : Layout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithLayoutBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Layout
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearLayoutBindingContextChangedHandlers<TBindable>(this TBindable self) where TBindable : Layout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithLayoutPropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : Layout
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearLayoutPropertyChangingHandlers<TBindable>(this TBindable self) where TBindable : Layout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
        public static TBindable BindIsClippedToBoundsLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Layout
                => self.Bind(Layout.IsClippedToBoundsProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindCascadeInputTransparentLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Layout
                => self.Bind(Layout.CascadeInputTransparentProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindPaddingLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Layout
                => self.Bind(Layout.PaddingProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}