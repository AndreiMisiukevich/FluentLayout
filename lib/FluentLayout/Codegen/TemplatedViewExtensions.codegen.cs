// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class TemplatedViewExtensions
    {


        public static TBindable WithTemplatedViewLayoutChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : TemplatedView
        {
            self.LayoutChanged += handlerAction;

            return self;
        }

        public static TBindable ClearTemplatedViewLayoutChangedHandlers<TBindable>(this TBindable self) where TBindable : TemplatedView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "LayoutChanged");

            return self;
        }

        public static TBindable WithTemplatedViewChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : TemplatedView
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearTemplatedViewChildrenReorderedHandlers<TBindable>(this TBindable self) where TBindable : TemplatedView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithTemplatedViewFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : TemplatedView
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearTemplatedViewFocusedHandlers<TBindable>(this TBindable self) where TBindable : TemplatedView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithTemplatedViewMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : TemplatedView
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearTemplatedViewMeasureInvalidatedHandlers<TBindable>(this TBindable self) where TBindable : TemplatedView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithTemplatedViewSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : TemplatedView
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearTemplatedViewSizeChangedHandlers<TBindable>(this TBindable self) where TBindable : TemplatedView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithTemplatedViewUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : TemplatedView
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearTemplatedViewUnfocusedHandlers<TBindable>(this TBindable self) where TBindable : TemplatedView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithTemplatedViewBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : TemplatedView
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearTemplatedViewBatchCommittedHandlers<TBindable>(this TBindable self) where TBindable : TemplatedView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithTemplatedViewFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : TemplatedView
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearTemplatedViewFocusChangeRequestedHandlers<TBindable>(this TBindable self) where TBindable : TemplatedView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithTemplatedViewChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : TemplatedView
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearTemplatedViewChildAddedHandlers<TBindable>(this TBindable self) where TBindable : TemplatedView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithTemplatedViewChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : TemplatedView
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearTemplatedViewChildRemovedHandlers<TBindable>(this TBindable self) where TBindable : TemplatedView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithTemplatedViewDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : TemplatedView
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearTemplatedViewDescendantAddedHandlers<TBindable>(this TBindable self) where TBindable : TemplatedView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithTemplatedViewDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : TemplatedView
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearTemplatedViewDescendantRemovedHandlers<TBindable>(this TBindable self) where TBindable : TemplatedView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithTemplatedViewPlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : TemplatedView
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearTemplatedViewPlatformSetHandlers<TBindable>(this TBindable self) where TBindable : TemplatedView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithTemplatedViewPropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : TemplatedView
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearTemplatedViewPropertyChangedHandlers<TBindable>(this TBindable self) where TBindable : TemplatedView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithTemplatedViewBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : TemplatedView
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearTemplatedViewBindingContextChangedHandlers<TBindable>(this TBindable self) where TBindable : TemplatedView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithTemplatedViewPropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : TemplatedView
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearTemplatedViewPropertyChangingHandlers<TBindable>(this TBindable self) where TBindable : TemplatedView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
        public static TBindable BindControlTemplateTemplatedView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : TemplatedView
                => self.Bind(TemplatedView.ControlTemplateProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}