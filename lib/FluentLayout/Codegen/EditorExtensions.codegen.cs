// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class EditorExtensions
    {


        public static TBindable WithEditorCompletedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Editor
        {
            self.Completed += handlerAction;

            return self;
        }

        public static TBindable ClearEditorCompletedHandlers<TBindable>(this TBindable self) where TBindable : Editor
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Completed");

            return self;
        }

        public static TBindable WithEditorTextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.TextChangedEventArgs> handlerAction) where TBindable : Editor
        {
            self.TextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearEditorTextChangedHandlers<TBindable>(this TBindable self) where TBindable : Editor
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "TextChanged");

            return self;
        }

        public static TBindable WithEditorChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Editor
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearEditorChildrenReorderedHandlers<TBindable>(this TBindable self) where TBindable : Editor
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithEditorFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : Editor
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearEditorFocusedHandlers<TBindable>(this TBindable self) where TBindable : Editor
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithEditorMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Editor
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearEditorMeasureInvalidatedHandlers<TBindable>(this TBindable self) where TBindable : Editor
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithEditorSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Editor
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearEditorSizeChangedHandlers<TBindable>(this TBindable self) where TBindable : Editor
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithEditorUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : Editor
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearEditorUnfocusedHandlers<TBindable>(this TBindable self) where TBindable : Editor
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithEditorBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : Editor
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearEditorBatchCommittedHandlers<TBindable>(this TBindable self) where TBindable : Editor
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithEditorFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : Editor
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearEditorFocusChangeRequestedHandlers<TBindable>(this TBindable self) where TBindable : Editor
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithEditorChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Editor
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearEditorChildAddedHandlers<TBindable>(this TBindable self) where TBindable : Editor
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithEditorChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Editor
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearEditorChildRemovedHandlers<TBindable>(this TBindable self) where TBindable : Editor
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithEditorDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Editor
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearEditorDescendantAddedHandlers<TBindable>(this TBindable self) where TBindable : Editor
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithEditorDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Editor
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearEditorDescendantRemovedHandlers<TBindable>(this TBindable self) where TBindable : Editor
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithEditorPlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Editor
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearEditorPlatformSetHandlers<TBindable>(this TBindable self) where TBindable : Editor
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithEditorPropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : Editor
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearEditorPropertyChangedHandlers<TBindable>(this TBindable self) where TBindable : Editor
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithEditorBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Editor
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearEditorBindingContextChangedHandlers<TBindable>(this TBindable self) where TBindable : Editor
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithEditorPropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : Editor
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearEditorPropertyChangingHandlers<TBindable>(this TBindable self) where TBindable : Editor
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
        public static TBindable BindTextEditor<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Editor
                => self.Bind(Editor.TextProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindFontFamilyEditor<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Editor
                => self.Bind(Editor.FontFamilyProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindFontSizeEditor<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Editor
                => self.Bind(Editor.FontSizeProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindFontAttributesEditor<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Editor
                => self.Bind(Editor.FontAttributesProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindTextColorEditor<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Editor
                => self.Bind(Editor.TextColorProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindPlaceholderEditor<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Editor
                => self.Bind(Editor.PlaceholderProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindPlaceholderColorEditor<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Editor
                => self.Bind(Editor.PlaceholderColorProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindAutoSizeEditor<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Editor
                => self.Bind(Editor.AutoSizeProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}