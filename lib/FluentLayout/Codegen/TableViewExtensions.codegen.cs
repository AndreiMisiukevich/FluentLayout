// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class TableViewExtensions
    {


        public static TBindable WithTableViewModelChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : TableView
        {
            self.ModelChanged += handlerAction;

            return self;
        }

        public static TBindable ClearTableViewModelChangedHandlers<TBindable>(this TBindable self) where TBindable : TableView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ModelChanged");

            return self;
        }

        public static TBindable WithTableViewChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : TableView
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearTableViewChildrenReorderedHandlers<TBindable>(this TBindable self) where TBindable : TableView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithTableViewFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : TableView
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearTableViewFocusedHandlers<TBindable>(this TBindable self) where TBindable : TableView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithTableViewMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : TableView
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearTableViewMeasureInvalidatedHandlers<TBindable>(this TBindable self) where TBindable : TableView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithTableViewSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : TableView
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearTableViewSizeChangedHandlers<TBindable>(this TBindable self) where TBindable : TableView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithTableViewUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : TableView
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearTableViewUnfocusedHandlers<TBindable>(this TBindable self) where TBindable : TableView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithTableViewBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : TableView
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearTableViewBatchCommittedHandlers<TBindable>(this TBindable self) where TBindable : TableView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithTableViewFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : TableView
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearTableViewFocusChangeRequestedHandlers<TBindable>(this TBindable self) where TBindable : TableView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithTableViewChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : TableView
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearTableViewChildAddedHandlers<TBindable>(this TBindable self) where TBindable : TableView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithTableViewChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : TableView
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearTableViewChildRemovedHandlers<TBindable>(this TBindable self) where TBindable : TableView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithTableViewDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : TableView
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearTableViewDescendantAddedHandlers<TBindable>(this TBindable self) where TBindable : TableView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithTableViewDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : TableView
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearTableViewDescendantRemovedHandlers<TBindable>(this TBindable self) where TBindable : TableView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithTableViewPlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : TableView
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearTableViewPlatformSetHandlers<TBindable>(this TBindable self) where TBindable : TableView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithTableViewPropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : TableView
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearTableViewPropertyChangedHandlers<TBindable>(this TBindable self) where TBindable : TableView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithTableViewBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : TableView
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearTableViewBindingContextChangedHandlers<TBindable>(this TBindable self) where TBindable : TableView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithTableViewPropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : TableView
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearTableViewPropertyChangingHandlers<TBindable>(this TBindable self) where TBindable : TableView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
        public static TBindable BindRowHeightTableView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : TableView
                => self.Bind(TableView.RowHeightProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindHasUnevenRowsTableView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : TableView
                => self.Bind(TableView.HasUnevenRowsProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}