// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class ImageExtensions
    {


        public static TBindable WithImageChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Image
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearImageChildrenReorderedHandlers<TBindable>(this TBindable self) where TBindable : Image
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithImageFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : Image
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearImageFocusedHandlers<TBindable>(this TBindable self) where TBindable : Image
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithImageMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Image
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearImageMeasureInvalidatedHandlers<TBindable>(this TBindable self) where TBindable : Image
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithImageSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Image
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearImageSizeChangedHandlers<TBindable>(this TBindable self) where TBindable : Image
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithImageUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : Image
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearImageUnfocusedHandlers<TBindable>(this TBindable self) where TBindable : Image
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithImageBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : Image
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearImageBatchCommittedHandlers<TBindable>(this TBindable self) where TBindable : Image
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithImageFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : Image
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearImageFocusChangeRequestedHandlers<TBindable>(this TBindable self) where TBindable : Image
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithImageChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Image
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearImageChildAddedHandlers<TBindable>(this TBindable self) where TBindable : Image
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithImageChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Image
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearImageChildRemovedHandlers<TBindable>(this TBindable self) where TBindable : Image
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithImageDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Image
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearImageDescendantAddedHandlers<TBindable>(this TBindable self) where TBindable : Image
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithImageDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Image
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearImageDescendantRemovedHandlers<TBindable>(this TBindable self) where TBindable : Image
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithImagePlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Image
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearImagePlatformSetHandlers<TBindable>(this TBindable self) where TBindable : Image
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithImagePropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : Image
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearImagePropertyChangedHandlers<TBindable>(this TBindable self) where TBindable : Image
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithImageBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Image
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearImageBindingContextChangedHandlers<TBindable>(this TBindable self) where TBindable : Image
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithImagePropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : Image
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearImagePropertyChangingHandlers<TBindable>(this TBindable self) where TBindable : Image
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
        public static TBindable BindSourceImage<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Image
                => self.Bind(Image.SourceProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindAspectImage<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Image
                => self.Bind(Image.AspectProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindIsOpaqueImage<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Image
                => self.Bind(Image.IsOpaqueProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindIsLoadingImage<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Image
                => self.Bind(Image.IsLoadingProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}