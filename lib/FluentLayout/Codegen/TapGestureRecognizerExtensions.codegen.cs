// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class TapGestureRecognizerExtensions
    {

        
        public static TapGestureRecognizer BindCommandTapGestureRecognizer(this TapGestureRecognizer self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null)
                => self.Bind(TapGestureRecognizer.CommandProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TapGestureRecognizer BindCommandParameterTapGestureRecognizer(this TapGestureRecognizer self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null)
                => self.Bind(TapGestureRecognizer.CommandParameterProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TapGestureRecognizer BindNumberOfTapsRequiredTapGestureRecognizer(this TapGestureRecognizer self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null)
                => self.Bind(TapGestureRecognizer.NumberOfTapsRequiredProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
[Obsolete]
        public static TapGestureRecognizer BindTappedCallbackTapGestureRecognizer(this TapGestureRecognizer self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null)
                => self.Bind(TapGestureRecognizer.TappedCallbackProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
[Obsolete]
        public static TapGestureRecognizer BindTappedCallbackParameterTapGestureRecognizer(this TapGestureRecognizer self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null)
                => self.Bind(TapGestureRecognizer.TappedCallbackParameterProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}