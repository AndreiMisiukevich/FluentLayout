// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class GridExtensions
    {


        public static TBindable WithGridLayoutChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Grid
        {
            self.LayoutChanged += handlerAction;

            return self;
        }

        public static TBindable ClearGridLayoutChangedHandlers<TBindable>(this TBindable self) where TBindable : Grid
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "LayoutChanged");

            return self;
        }

        public static TBindable WithGridChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Grid
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearGridChildrenReorderedHandlers<TBindable>(this TBindable self) where TBindable : Grid
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithGridFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : Grid
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearGridFocusedHandlers<TBindable>(this TBindable self) where TBindable : Grid
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithGridMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Grid
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearGridMeasureInvalidatedHandlers<TBindable>(this TBindable self) where TBindable : Grid
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithGridSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Grid
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearGridSizeChangedHandlers<TBindable>(this TBindable self) where TBindable : Grid
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithGridUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : Grid
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearGridUnfocusedHandlers<TBindable>(this TBindable self) where TBindable : Grid
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithGridBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : Grid
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearGridBatchCommittedHandlers<TBindable>(this TBindable self) where TBindable : Grid
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithGridFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : Grid
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearGridFocusChangeRequestedHandlers<TBindable>(this TBindable self) where TBindable : Grid
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithGridChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Grid
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearGridChildAddedHandlers<TBindable>(this TBindable self) where TBindable : Grid
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithGridChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Grid
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearGridChildRemovedHandlers<TBindable>(this TBindable self) where TBindable : Grid
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithGridDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Grid
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearGridDescendantAddedHandlers<TBindable>(this TBindable self) where TBindable : Grid
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithGridDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Grid
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearGridDescendantRemovedHandlers<TBindable>(this TBindable self) where TBindable : Grid
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithGridPlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Grid
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearGridPlatformSetHandlers<TBindable>(this TBindable self) where TBindable : Grid
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithGridPropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : Grid
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearGridPropertyChangedHandlers<TBindable>(this TBindable self) where TBindable : Grid
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithGridBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Grid
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearGridBindingContextChangedHandlers<TBindable>(this TBindable self) where TBindable : Grid
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithGridPropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : Grid
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearGridPropertyChangingHandlers<TBindable>(this TBindable self) where TBindable : Grid
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
        public static TBindable BindRowGrid<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Grid
                => self.Bind(Grid.RowProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable SetRow<TBindable>(this TBindable bindable, Int32 value) where TBindable : BindableObject
            => bindable.Set(Grid.RowProperty, value);
        
        public static TBindable BindRowSpanGrid<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Grid
                => self.Bind(Grid.RowSpanProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable SetRowSpan<TBindable>(this TBindable bindable, Int32 value) where TBindable : BindableObject
            => bindable.Set(Grid.RowSpanProperty, value);
        
        public static TBindable BindColumnGrid<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Grid
                => self.Bind(Grid.ColumnProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable SetColumn<TBindable>(this TBindable bindable, Int32 value) where TBindable : BindableObject
            => bindable.Set(Grid.ColumnProperty, value);
        
        public static TBindable BindColumnSpanGrid<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Grid
                => self.Bind(Grid.ColumnSpanProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable SetColumnSpan<TBindable>(this TBindable bindable, Int32 value) where TBindable : BindableObject
            => bindable.Set(Grid.ColumnSpanProperty, value);
        
        public static TBindable BindRowSpacingGrid<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Grid
                => self.Bind(Grid.RowSpacingProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindColumnSpacingGrid<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Grid
                => self.Bind(Grid.ColumnSpacingProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindColumnDefinitionsGrid<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Grid
                => self.Bind(Grid.ColumnDefinitionsProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindRowDefinitionsGrid<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Grid
                => self.Bind(Grid.RowDefinitionsProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}