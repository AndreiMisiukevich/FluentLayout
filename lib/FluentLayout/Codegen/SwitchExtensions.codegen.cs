// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class SwitchExtensions
    {


        public static TBindable WithSwitchToggledEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ToggledEventArgs> handlerAction) where TBindable : Switch
        {
            self.Toggled += handlerAction;

            return self;
        }

        public static TBindable ClearSwitchToggledHandlers<TBindable>(this TBindable self) where TBindable : Switch
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Toggled");

            return self;
        }

        public static TBindable WithSwitchChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Switch
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearSwitchChildrenReorderedHandlers<TBindable>(this TBindable self) where TBindable : Switch
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithSwitchFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : Switch
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearSwitchFocusedHandlers<TBindable>(this TBindable self) where TBindable : Switch
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithSwitchMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Switch
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearSwitchMeasureInvalidatedHandlers<TBindable>(this TBindable self) where TBindable : Switch
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithSwitchSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Switch
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearSwitchSizeChangedHandlers<TBindable>(this TBindable self) where TBindable : Switch
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithSwitchUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : Switch
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearSwitchUnfocusedHandlers<TBindable>(this TBindable self) where TBindable : Switch
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithSwitchBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : Switch
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearSwitchBatchCommittedHandlers<TBindable>(this TBindable self) where TBindable : Switch
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithSwitchFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : Switch
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearSwitchFocusChangeRequestedHandlers<TBindable>(this TBindable self) where TBindable : Switch
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithSwitchChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Switch
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearSwitchChildAddedHandlers<TBindable>(this TBindable self) where TBindable : Switch
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithSwitchChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Switch
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearSwitchChildRemovedHandlers<TBindable>(this TBindable self) where TBindable : Switch
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithSwitchDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Switch
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearSwitchDescendantAddedHandlers<TBindable>(this TBindable self) where TBindable : Switch
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithSwitchDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Switch
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearSwitchDescendantRemovedHandlers<TBindable>(this TBindable self) where TBindable : Switch
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithSwitchPlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Switch
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearSwitchPlatformSetHandlers<TBindable>(this TBindable self) where TBindable : Switch
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithSwitchPropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : Switch
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearSwitchPropertyChangedHandlers<TBindable>(this TBindable self) where TBindable : Switch
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithSwitchBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Switch
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearSwitchBindingContextChangedHandlers<TBindable>(this TBindable self) where TBindable : Switch
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithSwitchPropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : Switch
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearSwitchPropertyChangingHandlers<TBindable>(this TBindable self) where TBindable : Switch
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
        public static TBindable BindIsToggledSwitch<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Switch
                => self.Bind(Switch.IsToggledProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindOnColorSwitch<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Switch
                => self.Bind(Switch.OnColorProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}