// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class TimePickerExtensions
    {


        public static TBindable WithTimePickerChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : TimePicker
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearTimePickerChildrenReorderedHandlers<TBindable>(this TBindable self) where TBindable : TimePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithTimePickerFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : TimePicker
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearTimePickerFocusedHandlers<TBindable>(this TBindable self) where TBindable : TimePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithTimePickerMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : TimePicker
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearTimePickerMeasureInvalidatedHandlers<TBindable>(this TBindable self) where TBindable : TimePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithTimePickerSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : TimePicker
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearTimePickerSizeChangedHandlers<TBindable>(this TBindable self) where TBindable : TimePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithTimePickerUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : TimePicker
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearTimePickerUnfocusedHandlers<TBindable>(this TBindable self) where TBindable : TimePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithTimePickerBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : TimePicker
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearTimePickerBatchCommittedHandlers<TBindable>(this TBindable self) where TBindable : TimePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithTimePickerFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : TimePicker
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearTimePickerFocusChangeRequestedHandlers<TBindable>(this TBindable self) where TBindable : TimePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithTimePickerChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : TimePicker
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearTimePickerChildAddedHandlers<TBindable>(this TBindable self) where TBindable : TimePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithTimePickerChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : TimePicker
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearTimePickerChildRemovedHandlers<TBindable>(this TBindable self) where TBindable : TimePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithTimePickerDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : TimePicker
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearTimePickerDescendantAddedHandlers<TBindable>(this TBindable self) where TBindable : TimePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithTimePickerDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : TimePicker
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearTimePickerDescendantRemovedHandlers<TBindable>(this TBindable self) where TBindable : TimePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithTimePickerPlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : TimePicker
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearTimePickerPlatformSetHandlers<TBindable>(this TBindable self) where TBindable : TimePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithTimePickerPropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : TimePicker
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearTimePickerPropertyChangedHandlers<TBindable>(this TBindable self) where TBindable : TimePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithTimePickerBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : TimePicker
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearTimePickerBindingContextChangedHandlers<TBindable>(this TBindable self) where TBindable : TimePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithTimePickerPropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : TimePicker
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearTimePickerPropertyChangingHandlers<TBindable>(this TBindable self) where TBindable : TimePicker
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
        public static TBindable BindFormatTimePicker<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : TimePicker
                => self.Bind(TimePicker.FormatProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindTextColorTimePicker<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : TimePicker
                => self.Bind(TimePicker.TextColorProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindTimeTimePicker<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : TimePicker
                => self.Bind(TimePicker.TimeProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindFontFamilyTimePicker<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : TimePicker
                => self.Bind(TimePicker.FontFamilyProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindFontSizeTimePicker<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : TimePicker
                => self.Bind(TimePicker.FontSizeProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindFontAttributesTimePicker<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : TimePicker
                => self.Bind(TimePicker.FontAttributesProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}