// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class AbsoluteLayoutExtensions
    {


        public static TBindable WithAbsoluteLayoutLayoutChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : AbsoluteLayout
        {
            self.LayoutChanged += handlerAction;

            return self;
        }

        public static TBindable ClearAbsoluteLayoutLayoutChangedHandlers<TBindable>(this TBindable self) where TBindable : AbsoluteLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "LayoutChanged");

            return self;
        }

        public static TBindable WithAbsoluteLayoutChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : AbsoluteLayout
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearAbsoluteLayoutChildrenReorderedHandlers<TBindable>(this TBindable self) where TBindable : AbsoluteLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithAbsoluteLayoutFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : AbsoluteLayout
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearAbsoluteLayoutFocusedHandlers<TBindable>(this TBindable self) where TBindable : AbsoluteLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithAbsoluteLayoutMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : AbsoluteLayout
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearAbsoluteLayoutMeasureInvalidatedHandlers<TBindable>(this TBindable self) where TBindable : AbsoluteLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithAbsoluteLayoutSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : AbsoluteLayout
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearAbsoluteLayoutSizeChangedHandlers<TBindable>(this TBindable self) where TBindable : AbsoluteLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithAbsoluteLayoutUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : AbsoluteLayout
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearAbsoluteLayoutUnfocusedHandlers<TBindable>(this TBindable self) where TBindable : AbsoluteLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithAbsoluteLayoutBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : AbsoluteLayout
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearAbsoluteLayoutBatchCommittedHandlers<TBindable>(this TBindable self) where TBindable : AbsoluteLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithAbsoluteLayoutFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : AbsoluteLayout
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearAbsoluteLayoutFocusChangeRequestedHandlers<TBindable>(this TBindable self) where TBindable : AbsoluteLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithAbsoluteLayoutChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : AbsoluteLayout
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearAbsoluteLayoutChildAddedHandlers<TBindable>(this TBindable self) where TBindable : AbsoluteLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithAbsoluteLayoutChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : AbsoluteLayout
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearAbsoluteLayoutChildRemovedHandlers<TBindable>(this TBindable self) where TBindable : AbsoluteLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithAbsoluteLayoutDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : AbsoluteLayout
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearAbsoluteLayoutDescendantAddedHandlers<TBindable>(this TBindable self) where TBindable : AbsoluteLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithAbsoluteLayoutDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : AbsoluteLayout
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearAbsoluteLayoutDescendantRemovedHandlers<TBindable>(this TBindable self) where TBindable : AbsoluteLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithAbsoluteLayoutPlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : AbsoluteLayout
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearAbsoluteLayoutPlatformSetHandlers<TBindable>(this TBindable self) where TBindable : AbsoluteLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithAbsoluteLayoutPropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : AbsoluteLayout
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearAbsoluteLayoutPropertyChangedHandlers<TBindable>(this TBindable self) where TBindable : AbsoluteLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithAbsoluteLayoutBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : AbsoluteLayout
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearAbsoluteLayoutBindingContextChangedHandlers<TBindable>(this TBindable self) where TBindable : AbsoluteLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithAbsoluteLayoutPropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : AbsoluteLayout
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearAbsoluteLayoutPropertyChangingHandlers<TBindable>(this TBindable self) where TBindable : AbsoluteLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
        public static TBindable BindLayoutFlagsAbsoluteLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : AbsoluteLayout
                => self.Bind(AbsoluteLayout.LayoutFlagsProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable SetLayoutFlags<TBindable>(this TBindable bindable, AbsoluteLayoutFlags value) where TBindable : BindableObject
            => bindable.Set(AbsoluteLayout.LayoutFlagsProperty, value);
        
        public static TBindable BindLayoutBoundsAbsoluteLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : AbsoluteLayout
                => self.Bind(AbsoluteLayout.LayoutBoundsProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable SetLayoutBounds<TBindable>(this TBindable bindable, Rectangle value) where TBindable : BindableObject
            => bindable.Set(AbsoluteLayout.LayoutBoundsProperty, value);
    }
}