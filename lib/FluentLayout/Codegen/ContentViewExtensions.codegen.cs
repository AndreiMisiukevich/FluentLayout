// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class ContentViewExtensions
    {


        public static TBindable WithContentViewLayoutChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ContentView
        {
            self.LayoutChanged += handlerAction;

            return self;
        }

        public static TBindable ClearContentViewLayoutChangedHandlers<TBindable>(this TBindable self) where TBindable : ContentView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "LayoutChanged");

            return self;
        }

        public static TBindable WithContentViewChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ContentView
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearContentViewChildrenReorderedHandlers<TBindable>(this TBindable self) where TBindable : ContentView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithContentViewFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : ContentView
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearContentViewFocusedHandlers<TBindable>(this TBindable self) where TBindable : ContentView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithContentViewMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ContentView
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearContentViewMeasureInvalidatedHandlers<TBindable>(this TBindable self) where TBindable : ContentView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithContentViewSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ContentView
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearContentViewSizeChangedHandlers<TBindable>(this TBindable self) where TBindable : ContentView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithContentViewUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : ContentView
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearContentViewUnfocusedHandlers<TBindable>(this TBindable self) where TBindable : ContentView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithContentViewBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : ContentView
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearContentViewBatchCommittedHandlers<TBindable>(this TBindable self) where TBindable : ContentView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithContentViewFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : ContentView
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearContentViewFocusChangeRequestedHandlers<TBindable>(this TBindable self) where TBindable : ContentView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithContentViewChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : ContentView
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearContentViewChildAddedHandlers<TBindable>(this TBindable self) where TBindable : ContentView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithContentViewChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : ContentView
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearContentViewChildRemovedHandlers<TBindable>(this TBindable self) where TBindable : ContentView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithContentViewDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : ContentView
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearContentViewDescendantAddedHandlers<TBindable>(this TBindable self) where TBindable : ContentView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithContentViewDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : ContentView
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearContentViewDescendantRemovedHandlers<TBindable>(this TBindable self) where TBindable : ContentView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithContentViewPlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ContentView
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearContentViewPlatformSetHandlers<TBindable>(this TBindable self) where TBindable : ContentView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithContentViewPropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : ContentView
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearContentViewPropertyChangedHandlers<TBindable>(this TBindable self) where TBindable : ContentView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithContentViewBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ContentView
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearContentViewBindingContextChangedHandlers<TBindable>(this TBindable self) where TBindable : ContentView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithContentViewPropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : ContentView
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearContentViewPropertyChangingHandlers<TBindable>(this TBindable self) where TBindable : ContentView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
        public static TBindable BindContentContentView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ContentView
                => self.Bind(ContentView.ContentProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}