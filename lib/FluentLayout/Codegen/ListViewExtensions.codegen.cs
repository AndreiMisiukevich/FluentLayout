// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class ListViewExtensions
    {


        public static TBindable SetItemAppearingEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs> handlerAction) where TBindable : ListView
        {
            self.ItemAppearing += handlerAction;

            return self;
        }

        public static TBindable SetItemDisappearingEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs> handlerAction) where TBindable : ListView
        {
            self.ItemDisappearing += handlerAction;

            return self;
        }

        public static TBindable SetItemSelectedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.SelectedItemChangedEventArgs> handlerAction) where TBindable : ListView
        {
            self.ItemSelected += handlerAction;

            return self;
        }

        public static TBindable SetItemTappedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ItemTappedEventArgs> handlerAction) where TBindable : ListView
        {
            self.ItemTapped += handlerAction;

            return self;
        }

        public static TBindable SetRefreshingEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ListView
        {
            self.Refreshing += handlerAction;

            return self;
        }

        public static TBindable SetScrollToRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ScrollToRequestedEventArgs> handlerAction) where TBindable : ListView
        {
            self.ScrollToRequested += handlerAction;

            return self;
        }

        public static TBindable SetChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ListView
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable SetFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : ListView
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable SetMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ListView
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable SetSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ListView
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable SetUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : ListView
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable SetBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : ListView
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable SetFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : ListView
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable SetChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : ListView
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable SetChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : ListView
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable SetDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : ListView
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable SetDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : ListView
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable SetPlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ListView
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable SetPropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : ListView
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable SetBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ListView
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable SetPropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : ListView
        {
            self.PropertyChanging += handlerAction;

            return self;
        }
        
        public static TBindable BindIsPullToRefreshEnabledListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.IsPullToRefreshEnabledProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindIsRefreshingListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.IsRefreshingProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindRefreshCommandListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.RefreshCommandProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindHeaderListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.HeaderProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindHeaderTemplateListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.HeaderTemplateProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindFooterListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.FooterProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindFooterTemplateListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.FooterTemplateProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindSelectedItemListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.SelectedItemProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindSelectionModeListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.SelectionModeProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindHasUnevenRowsListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.HasUnevenRowsProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindRowHeightListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.RowHeightProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindGroupHeaderTemplateListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.GroupHeaderTemplateProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindIsGroupingEnabledListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.IsGroupingEnabledProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindSeparatorVisibilityListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.SeparatorVisibilityProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindSeparatorColorListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.SeparatorColorProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}