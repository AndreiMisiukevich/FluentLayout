// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class ListViewExtensions
    {


        public static TBindable WithItemAppearingEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs> handlerAction) where TBindable : ListView
        {
            self.ItemAppearing += handlerAction;

            return self;
        }

        public static TBindable ClearItemAppearingEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ItemAppearing");

            return self;
        }

        public static TBindable WithItemDisappearingEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ItemVisibilityEventArgs> handlerAction) where TBindable : ListView
        {
            self.ItemDisappearing += handlerAction;

            return self;
        }

        public static TBindable ClearItemDisappearingEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ItemDisappearing");

            return self;
        }

        public static TBindable WithItemSelectedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.SelectedItemChangedEventArgs> handlerAction) where TBindable : ListView
        {
            self.ItemSelected += handlerAction;

            return self;
        }

        public static TBindable ClearItemSelectedEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ItemSelected");

            return self;
        }

        public static TBindable WithItemTappedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ItemTappedEventArgs> handlerAction) where TBindable : ListView
        {
            self.ItemTapped += handlerAction;

            return self;
        }

        public static TBindable ClearItemTappedEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ItemTapped");

            return self;
        }

        public static TBindable WithRefreshingEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ListView
        {
            self.Refreshing += handlerAction;

            return self;
        }

        public static TBindable ClearRefreshingEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Refreshing");

            return self;
        }

        public static TBindable WithScrollToRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ScrollToRequestedEventArgs> handlerAction) where TBindable : ListView
        {
            self.ScrollToRequested += handlerAction;

            return self;
        }

        public static TBindable ClearScrollToRequestedEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ScrollToRequested");

            return self;
        }

        public static TBindable WithChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ListView
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearChildrenReorderedEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : ListView
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearFocusedEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ListView
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearMeasureInvalidatedEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ListView
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearSizeChangedEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : ListView
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearUnfocusedEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : ListView
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearBatchCommittedEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : ListView
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearFocusChangeRequestedEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : ListView
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearChildAddedEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : ListView
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearChildRemovedEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : ListView
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearDescendantAddedEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : ListView
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearDescendantRemovedEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithPlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ListView
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearPlatformSetEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithPropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : ListView
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearPropertyChangedEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ListView
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearBindingContextChangedEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithPropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : ListView
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearPropertyChangingEventHandlers<TBindable>(this TBindable self) where TBindable : ListView
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
        public static TBindable BindIsPullToRefreshEnabledListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.IsPullToRefreshEnabledProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindIsRefreshingListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.IsRefreshingProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindRefreshCommandListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.RefreshCommandProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindHeaderListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.HeaderProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindHeaderTemplateListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.HeaderTemplateProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindFooterListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.FooterProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindFooterTemplateListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.FooterTemplateProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindSelectedItemListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.SelectedItemProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindSelectionModeListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.SelectionModeProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindHasUnevenRowsListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.HasUnevenRowsProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindRowHeightListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.RowHeightProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindGroupHeaderTemplateListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.GroupHeaderTemplateProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindIsGroupingEnabledListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.IsGroupingEnabledProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindSeparatorVisibilityListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.SeparatorVisibilityProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindSeparatorColorListView<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ListView
                => self.Bind(ListView.SeparatorColorProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}