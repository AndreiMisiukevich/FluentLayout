// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class ContentPresenterExtensions
    {


        public static TBindable WithContentPresenterLayoutChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ContentPresenter
        {
            self.LayoutChanged += handlerAction;

            return self;
        }

        public static TBindable ClearContentPresenterLayoutChangedHandlers<TBindable>(this TBindable self) where TBindable : ContentPresenter
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "LayoutChanged");

            return self;
        }

        public static TBindable WithContentPresenterChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ContentPresenter
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearContentPresenterChildrenReorderedHandlers<TBindable>(this TBindable self) where TBindable : ContentPresenter
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithContentPresenterFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : ContentPresenter
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearContentPresenterFocusedHandlers<TBindable>(this TBindable self) where TBindable : ContentPresenter
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithContentPresenterMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ContentPresenter
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearContentPresenterMeasureInvalidatedHandlers<TBindable>(this TBindable self) where TBindable : ContentPresenter
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithContentPresenterSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ContentPresenter
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearContentPresenterSizeChangedHandlers<TBindable>(this TBindable self) where TBindable : ContentPresenter
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithContentPresenterUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : ContentPresenter
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearContentPresenterUnfocusedHandlers<TBindable>(this TBindable self) where TBindable : ContentPresenter
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithContentPresenterBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : ContentPresenter
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearContentPresenterBatchCommittedHandlers<TBindable>(this TBindable self) where TBindable : ContentPresenter
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithContentPresenterFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : ContentPresenter
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearContentPresenterFocusChangeRequestedHandlers<TBindable>(this TBindable self) where TBindable : ContentPresenter
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithContentPresenterChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : ContentPresenter
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearContentPresenterChildAddedHandlers<TBindable>(this TBindable self) where TBindable : ContentPresenter
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithContentPresenterChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : ContentPresenter
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearContentPresenterChildRemovedHandlers<TBindable>(this TBindable self) where TBindable : ContentPresenter
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithContentPresenterDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : ContentPresenter
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearContentPresenterDescendantAddedHandlers<TBindable>(this TBindable self) where TBindable : ContentPresenter
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithContentPresenterDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : ContentPresenter
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearContentPresenterDescendantRemovedHandlers<TBindable>(this TBindable self) where TBindable : ContentPresenter
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithContentPresenterPlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ContentPresenter
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearContentPresenterPlatformSetHandlers<TBindable>(this TBindable self) where TBindable : ContentPresenter
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithContentPresenterPropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : ContentPresenter
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearContentPresenterPropertyChangedHandlers<TBindable>(this TBindable self) where TBindable : ContentPresenter
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithContentPresenterBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : ContentPresenter
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearContentPresenterBindingContextChangedHandlers<TBindable>(this TBindable self) where TBindable : ContentPresenter
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithContentPresenterPropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : ContentPresenter
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearContentPresenterPropertyChangingHandlers<TBindable>(this TBindable self) where TBindable : ContentPresenter
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
        public static TBindable BindContentContentPresenter<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : ContentPresenter
                => self.Bind(ContentPresenter.ContentProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}