// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class FlexLayoutExtensions
    {

        
        public static TBindable BindDirectionFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.DirectionProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindJustifyContentFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.JustifyContentProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindAlignContentFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.AlignContentProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindAlignItemsFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.AlignItemsProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindPositionFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.PositionProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindWrapFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.WrapProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindOrderFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.OrderProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable SetOrder<TBindable>(this TBindable bindable, Int32 value) where TBindable : BindableObject
            => bindable.Set(FlexLayout.OrderProperty, value);
        
        public static TBindable BindGrowFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.GrowProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable SetGrow<TBindable>(this TBindable bindable, Single value) where TBindable : BindableObject
            => bindable.Set(FlexLayout.GrowProperty, value);
        
        public static TBindable BindShrinkFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.ShrinkProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable SetShrink<TBindable>(this TBindable bindable, Single value) where TBindable : BindableObject
            => bindable.Set(FlexLayout.ShrinkProperty, value);
        
        public static TBindable BindAlignSelfFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.AlignSelfProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable SetAlignSelf<TBindable>(this TBindable bindable, FlexAlignSelf value) where TBindable : BindableObject
            => bindable.Set(FlexLayout.AlignSelfProperty, value);
        
        public static TBindable BindBasisFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.BasisProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable SetBasis<TBindable>(this TBindable bindable, FlexBasis value) where TBindable : BindableObject
            => bindable.Set(FlexLayout.BasisProperty, value);
    }
}