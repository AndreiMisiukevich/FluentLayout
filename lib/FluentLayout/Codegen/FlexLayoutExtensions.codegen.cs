// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class FlexLayoutExtensions
    {


        public static TBindable WithFlexLayoutLayoutChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : FlexLayout
        {
            self.LayoutChanged += handlerAction;

            return self;
        }

        public static TBindable ClearFlexLayoutLayoutChangedHandlers<TBindable>(this TBindable self) where TBindable : FlexLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "LayoutChanged");

            return self;
        }

        public static TBindable WithFlexLayoutChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : FlexLayout
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearFlexLayoutChildrenReorderedHandlers<TBindable>(this TBindable self) where TBindable : FlexLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithFlexLayoutFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : FlexLayout
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearFlexLayoutFocusedHandlers<TBindable>(this TBindable self) where TBindable : FlexLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithFlexLayoutMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : FlexLayout
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearFlexLayoutMeasureInvalidatedHandlers<TBindable>(this TBindable self) where TBindable : FlexLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithFlexLayoutSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : FlexLayout
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearFlexLayoutSizeChangedHandlers<TBindable>(this TBindable self) where TBindable : FlexLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithFlexLayoutUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : FlexLayout
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearFlexLayoutUnfocusedHandlers<TBindable>(this TBindable self) where TBindable : FlexLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithFlexLayoutBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : FlexLayout
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearFlexLayoutBatchCommittedHandlers<TBindable>(this TBindable self) where TBindable : FlexLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithFlexLayoutFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : FlexLayout
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearFlexLayoutFocusChangeRequestedHandlers<TBindable>(this TBindable self) where TBindable : FlexLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithFlexLayoutChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : FlexLayout
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearFlexLayoutChildAddedHandlers<TBindable>(this TBindable self) where TBindable : FlexLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithFlexLayoutChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : FlexLayout
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearFlexLayoutChildRemovedHandlers<TBindable>(this TBindable self) where TBindable : FlexLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithFlexLayoutDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : FlexLayout
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearFlexLayoutDescendantAddedHandlers<TBindable>(this TBindable self) where TBindable : FlexLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithFlexLayoutDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : FlexLayout
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearFlexLayoutDescendantRemovedHandlers<TBindable>(this TBindable self) where TBindable : FlexLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithFlexLayoutPlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : FlexLayout
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearFlexLayoutPlatformSetHandlers<TBindable>(this TBindable self) where TBindable : FlexLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithFlexLayoutPropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : FlexLayout
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearFlexLayoutPropertyChangedHandlers<TBindable>(this TBindable self) where TBindable : FlexLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithFlexLayoutBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : FlexLayout
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearFlexLayoutBindingContextChangedHandlers<TBindable>(this TBindable self) where TBindable : FlexLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithFlexLayoutPropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : FlexLayout
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearFlexLayoutPropertyChangingHandlers<TBindable>(this TBindable self) where TBindable : FlexLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
        public static TBindable BindDirectionFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.DirectionProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindJustifyContentFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.JustifyContentProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindAlignContentFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.AlignContentProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindAlignItemsFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.AlignItemsProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindPositionFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.PositionProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindWrapFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.WrapProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindOrderFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.OrderProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable SetOrder<TBindable>(this TBindable bindable, Int32 value) where TBindable : BindableObject
            => bindable.Set(FlexLayout.OrderProperty, value);
        
        public static TBindable BindGrowFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.GrowProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable SetGrow<TBindable>(this TBindable bindable, Single value) where TBindable : BindableObject
            => bindable.Set(FlexLayout.GrowProperty, value);
        
        public static TBindable BindShrinkFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.ShrinkProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable SetShrink<TBindable>(this TBindable bindable, Single value) where TBindable : BindableObject
            => bindable.Set(FlexLayout.ShrinkProperty, value);
        
        public static TBindable BindAlignSelfFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.AlignSelfProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable SetAlignSelf<TBindable>(this TBindable bindable, FlexAlignSelf value) where TBindable : BindableObject
            => bindable.Set(FlexLayout.AlignSelfProperty, value);
        
        public static TBindable BindBasisFlexLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : FlexLayout
                => self.Bind(FlexLayout.BasisProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable SetBasis<TBindable>(this TBindable bindable, FlexBasis value) where TBindable : BindableObject
            => bindable.Set(FlexLayout.BasisProperty, value);
    }
}