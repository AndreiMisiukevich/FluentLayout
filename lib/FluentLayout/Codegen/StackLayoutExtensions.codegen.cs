// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class StackLayoutExtensions
    {


        public static TBindable WithStackLayoutLayoutChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : StackLayout
        {
            self.LayoutChanged += handlerAction;

            return self;
        }

        public static TBindable ClearStackLayoutLayoutChangedHandlers<TBindable>(this TBindable self) where TBindable : StackLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "LayoutChanged");

            return self;
        }

        public static TBindable WithStackLayoutChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : StackLayout
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearStackLayoutChildrenReorderedHandlers<TBindable>(this TBindable self) where TBindable : StackLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithStackLayoutFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : StackLayout
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearStackLayoutFocusedHandlers<TBindable>(this TBindable self) where TBindable : StackLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithStackLayoutMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : StackLayout
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearStackLayoutMeasureInvalidatedHandlers<TBindable>(this TBindable self) where TBindable : StackLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithStackLayoutSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : StackLayout
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearStackLayoutSizeChangedHandlers<TBindable>(this TBindable self) where TBindable : StackLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithStackLayoutUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : StackLayout
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearStackLayoutUnfocusedHandlers<TBindable>(this TBindable self) where TBindable : StackLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithStackLayoutBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : StackLayout
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearStackLayoutBatchCommittedHandlers<TBindable>(this TBindable self) where TBindable : StackLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithStackLayoutFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : StackLayout
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearStackLayoutFocusChangeRequestedHandlers<TBindable>(this TBindable self) where TBindable : StackLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithStackLayoutChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : StackLayout
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearStackLayoutChildAddedHandlers<TBindable>(this TBindable self) where TBindable : StackLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithStackLayoutChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : StackLayout
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearStackLayoutChildRemovedHandlers<TBindable>(this TBindable self) where TBindable : StackLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithStackLayoutDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : StackLayout
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearStackLayoutDescendantAddedHandlers<TBindable>(this TBindable self) where TBindable : StackLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithStackLayoutDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : StackLayout
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearStackLayoutDescendantRemovedHandlers<TBindable>(this TBindable self) where TBindable : StackLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithStackLayoutPlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : StackLayout
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearStackLayoutPlatformSetHandlers<TBindable>(this TBindable self) where TBindable : StackLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithStackLayoutPropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : StackLayout
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearStackLayoutPropertyChangedHandlers<TBindable>(this TBindable self) where TBindable : StackLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithStackLayoutBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : StackLayout
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearStackLayoutBindingContextChangedHandlers<TBindable>(this TBindable self) where TBindable : StackLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithStackLayoutPropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : StackLayout
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearStackLayoutPropertyChangingHandlers<TBindable>(this TBindable self) where TBindable : StackLayout
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
        public static TBindable BindOrientationStackLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : StackLayout
                => self.Bind(StackLayout.OrientationProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindSpacingStackLayout<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : StackLayout
                => self.Bind(StackLayout.SpacingProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}