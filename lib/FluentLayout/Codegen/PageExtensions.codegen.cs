// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class PageExtensions
    {


        public static TBindable WithPageLayoutChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Page
        {
            self.LayoutChanged += handlerAction;

            return self;
        }

        public static TBindable ClearPageLayoutChangedHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "LayoutChanged");

            return self;
        }

        public static TBindable WithPageAppearingEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Page
        {
            self.Appearing += handlerAction;

            return self;
        }

        public static TBindable ClearPageAppearingHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Appearing");

            return self;
        }

        public static TBindable WithPageDisappearingEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Page
        {
            self.Disappearing += handlerAction;

            return self;
        }

        public static TBindable ClearPageDisappearingHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Disappearing");

            return self;
        }

        public static TBindable WithPageChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Page
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearPageChildrenReorderedHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithPageFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : Page
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearPageFocusedHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithPageMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Page
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearPageMeasureInvalidatedHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithPageSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Page
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearPageSizeChangedHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithPageUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : Page
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearPageUnfocusedHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithPageBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : Page
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearPageBatchCommittedHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithPageFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : Page
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearPageFocusChangeRequestedHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithPageChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Page
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearPageChildAddedHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithPageChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Page
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearPageChildRemovedHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithPageDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Page
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearPageDescendantAddedHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithPageDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Page
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearPageDescendantRemovedHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithPagePlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Page
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearPagePlatformSetHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithPagePropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : Page
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearPagePropertyChangedHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithPageBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Page
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearPageBindingContextChangedHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithPagePropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : Page
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearPagePropertyChangingHandlers<TBindable>(this TBindable self) where TBindable : Page
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
        public static TBindable BindBackgroundImagePage<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Page
                => self.Bind(Page.BackgroundImageProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindIsBusyPage<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Page
                => self.Bind(Page.IsBusyProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindPaddingPage<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Page
                => self.Bind(Page.PaddingProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindTitlePage<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Page
                => self.Bind(Page.TitleProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindIconPage<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Page
                => self.Bind(Page.IconProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}