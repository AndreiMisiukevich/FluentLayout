// This file is generated by FluentCodegen
// It does not make sense to change something here
// No stress :)
using System;
namespace Xamarin.Forms.Fluent
{
    public static partial class FrameExtensions
    {


        public static TBindable WithFrameLayoutChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Frame
        {
            self.LayoutChanged += handlerAction;

            return self;
        }

        public static TBindable ClearFrameLayoutChangedHandlers<TBindable>(this TBindable self) where TBindable : Frame
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "LayoutChanged");

            return self;
        }

        public static TBindable WithFrameChildrenReorderedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Frame
        {
            self.ChildrenReordered += handlerAction;

            return self;
        }

        public static TBindable ClearFrameChildrenReorderedHandlers<TBindable>(this TBindable self) where TBindable : Frame
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildrenReordered");

            return self;
        }

        public static TBindable WithFrameFocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : Frame
        {
            self.Focused += handlerAction;

            return self;
        }

        public static TBindable ClearFrameFocusedHandlers<TBindable>(this TBindable self) where TBindable : Frame
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Focused");

            return self;
        }

        public static TBindable WithFrameMeasureInvalidatedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Frame
        {
            self.MeasureInvalidated += handlerAction;

            return self;
        }

        public static TBindable ClearFrameMeasureInvalidatedHandlers<TBindable>(this TBindable self) where TBindable : Frame
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "MeasureInvalidated");

            return self;
        }

        public static TBindable WithFrameSizeChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Frame
        {
            self.SizeChanged += handlerAction;

            return self;
        }

        public static TBindable ClearFrameSizeChangedHandlers<TBindable>(this TBindable self) where TBindable : Frame
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "SizeChanged");

            return self;
        }

        public static TBindable WithFrameUnfocusedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.FocusEventArgs> handlerAction) where TBindable : Frame
        {
            self.Unfocused += handlerAction;

            return self;
        }

        public static TBindable ClearFrameUnfocusedHandlers<TBindable>(this TBindable self) where TBindable : Frame
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "Unfocused");

            return self;
        }

        public static TBindable WithFrameBatchCommittedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.Internals.EventArg<Xamarin.Forms.VisualElement>> handlerAction) where TBindable : Frame
        {
            self.BatchCommitted += handlerAction;

            return self;
        }

        public static TBindable ClearFrameBatchCommittedHandlers<TBindable>(this TBindable self) where TBindable : Frame
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BatchCommitted");

            return self;
        }

        public static TBindable WithFrameFocusChangeRequestedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.VisualElement.FocusRequestArgs> handlerAction) where TBindable : Frame
        {
            self.FocusChangeRequested += handlerAction;

            return self;
        }

        public static TBindable ClearFrameFocusChangeRequestedHandlers<TBindable>(this TBindable self) where TBindable : Frame
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "FocusChangeRequested");

            return self;
        }

        public static TBindable WithFrameChildAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Frame
        {
            self.ChildAdded += handlerAction;

            return self;
        }

        public static TBindable ClearFrameChildAddedHandlers<TBindable>(this TBindable self) where TBindable : Frame
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildAdded");

            return self;
        }

        public static TBindable WithFrameChildRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Frame
        {
            self.ChildRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearFrameChildRemovedHandlers<TBindable>(this TBindable self) where TBindable : Frame
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "ChildRemoved");

            return self;
        }

        public static TBindable WithFrameDescendantAddedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Frame
        {
            self.DescendantAdded += handlerAction;

            return self;
        }

        public static TBindable ClearFrameDescendantAddedHandlers<TBindable>(this TBindable self) where TBindable : Frame
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantAdded");

            return self;
        }

        public static TBindable WithFrameDescendantRemovedEvent<TBindable>(this TBindable self,
            System.EventHandler<Xamarin.Forms.ElementEventArgs> handlerAction) where TBindable : Frame
        {
            self.DescendantRemoved += handlerAction;

            return self;
        }

        public static TBindable ClearFrameDescendantRemovedHandlers<TBindable>(this TBindable self) where TBindable : Frame
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "DescendantRemoved");

            return self;
        }

        public static TBindable WithFramePlatformSetEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Frame
        {
            self.PlatformSet += handlerAction;

            return self;
        }

        public static TBindable ClearFramePlatformSetHandlers<TBindable>(this TBindable self) where TBindable : Frame
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PlatformSet");

            return self;
        }

        public static TBindable WithFramePropertyChangedEvent<TBindable>(this TBindable self,
            System.ComponentModel.PropertyChangedEventHandler handlerAction) where TBindable : Frame
        {
            self.PropertyChanged += handlerAction;

            return self;
        }

        public static TBindable ClearFramePropertyChangedHandlers<TBindable>(this TBindable self) where TBindable : Frame
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanged");

            return self;
        }

        public static TBindable WithFrameBindingContextChangedEvent<TBindable>(this TBindable self,
            System.EventHandler handlerAction) where TBindable : Frame
        {
            self.BindingContextChanged += handlerAction;

            return self;
        }

        public static TBindable ClearFrameBindingContextChangedHandlers<TBindable>(this TBindable self) where TBindable : Frame
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "BindingContextChanged");

            return self;
        }

        public static TBindable WithFramePropertyChangingEvent<TBindable>(this TBindable self,
            Xamarin.Forms.PropertyChangingEventHandler handlerAction) where TBindable : Frame
        {
            self.PropertyChanging += handlerAction;

            return self;
        }

        public static TBindable ClearFramePropertyChangingHandlers<TBindable>(this TBindable self) where TBindable : Frame
        {
            Xamarin.Forms.Fluent.EventExtensions.ClearEventInvocations(self, "PropertyChanging");

            return self;
        }
        
[Obsolete]
        public static TBindable BindOutlineColorFrame<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Frame
                => self.Bind(Frame.OutlineColorProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindBorderColorFrame<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Frame
                => self.Bind(Frame.BorderColorProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindHasShadowFrame<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Frame
                => self.Bind(Frame.HasShadowProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
        
        public static TBindable BindCornerRadiusFrame<TBindable>(this TBindable self,
            string path,
            BindingMode mode = BindingMode.Default,
            IValueConverter converter = null,
            object converterParameter = null,
            string stringFormat = null,
            object source = null,
            object targetNullValue = null,
            object fallbackValue = null) where TBindable : Frame
                => self.Bind(Frame.CornerRadiusProperty, path, mode, converter, converterParameter, stringFormat, source, targetNullValue, fallbackValue);
    }
}